name: CyberSurfing TimeLine CI/CD
on:
  workflow_dispatch:
    inputs:
      publish_chrome:
        default: "0"
        description: "Publish to Chrome Web Store"
        type: string
        required: false
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package_version.outputs.version }}
      should_release: ${{ steps.check_release.outputs.should_release }}
    
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - name: Get package version
        id: package_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Check if should release
        id: check_release
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/v"* ]] || [[ "${{ github.event.inputs.publish_chrome }}" == "1" ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        run: pnpm install

      - name: Type check
        run: pnpm run compile

      - name: Build extension
        run: pnpm run build

      - name: Create Chrome zip
        run: pnpm run zip
      - name: Rename zip files with version
        if: steps.check_release.outputs.should_release == 'true'
        run: |
          cd .wxt/zips
          mv chrome*.zip ../chrome-cybersurfing-timeline-${{ steps.package_version.outputs.version }}.zip
          cd ..
          ls -la *.zip

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-builds-${{ steps.package_version.outputs.version }}
          path: |
            .wxt/*.zip
            dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.outputs.should_release == 'true'
    
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: extension-builds-${{ needs.build.outputs.version }}
          path: ./artifacts
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            artifacts/chrome-cybersurfing-timeline-${{ needs.build.outputs.version }}.zip
          tag: v${{ needs.build.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true
          name: "CyberSurfing TimeLine v${{ needs.build.outputs.version }}"
          body: |
            ## ðŸš€ New Release: CyberSurfing TimeLine v${{ needs.build.outputs.version }}
            
            ### ðŸ“¦ Installation
            - **Chrome**: Download the Chrome zip file and load as unpacked extension
            
            ### ðŸ”— Store Links (when published)
            - Chrome Web Store: *Coming soon*
            
            ---
            *This extension helps you track your browsing timeline and statistics.*

  publish:
    needs: [build, release]
    runs-on: ubuntu-latest
    if: needs.build.outputs.should_release == 'true' && github.event.inputs.publish_chrome == '1'
    
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: extension-builds-${{ needs.build.outputs.version }}
          path: ./artifacts

      - name: Publish to Chrome Web Store
        uses: mnao305/chrome-extension-upload@v4.0.1
        with:
          file-path: artifacts/chrome-cybersurfing-timeline-${{ needs.build.outputs.version }}.zip
          extension-id: ${{ secrets.CHROME_EXTENSION_ID }}
          client-id: ${{ secrets.CHROME_CLIENT_ID }}
          client-secret: ${{ secrets.CHROME_CLIENT_SECRET }}
          refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}
